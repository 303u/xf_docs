import{_ as n,c as a,ac as i,o as l}from"./chunks/framework.CeO_JeQa.js";const u=JSON.parse('{"title":"构建对接","description":"","frontmatter":{},"headers":[],"relativePath":"zh_CN/porting/porting_xfusion_build.md","filePath":"zh_CN/porting/porting_xfusion_build.md","lastUpdated":1744789501000}'),p={name:"zh_CN/porting/porting_xfusion_build.md"};function e(t,s,r,h,k,o){return l(),a("div",null,s[0]||(s[0]=[i(`<h1 id="构建对接" tabindex="-1">构建对接 <a class="header-anchor" href="#构建对接" aria-label="Permalink to &quot;构建对接&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">作者</p><p>dotc</p></div><p>本章节介绍如何对接 XFusion 构建部分</p><p>(可简单理解为：如何将 XFusion 的工程的构建 (编译) 信息给到平台侧的工程，一起进行构建)</p><p><strong>前置准备：</strong></p><ul><li>了解 XFusion 的构建命令及其参数的作用。</li><li>会使用 python</li><li>简单了解 jinja 用法</li><li>对将要对接的平台构建流程较为熟悉</li><li>已完成 <a href="./porting_xfusion_build.html">平台工程移植</a> 的步骤 (本章节默认已经完成该步骤)</li></ul><h1 id="目前需要对接的基础功能有" tabindex="-1">目前需要对接的基础功能有 <a class="header-anchor" href="#目前需要对接的基础功能有" aria-label="Permalink to &quot;目前需要对接的基础功能有&quot;">​</a></h1><h1 id="对接流程" tabindex="-1">对接流程 <a class="header-anchor" href="#对接流程" aria-label="Permalink to &quot;对接流程&quot;">​</a></h1><h2 id="_1-对接构建方法" tabindex="-1">1. 对接构建方法 <a class="header-anchor" href="#_1-对接构建方法" aria-label="Permalink to &quot;1. 对接构建方法&quot;">​</a></h2><ol><li><p>在 <strong>xfusion/plugins</strong> 下 新增一个目录，目录名需要与目标目录名 (<strong><em>xfusion/boards/ ... /[target_name]</em></strong>) 一致（或者说与环境激活时 (. ./export.sh [target_name])，传入的目标对象名一致）。</p><ul><li>原因：xfusion 在进行构建时 (如： xf build)，会在 xfusion/plugins 下 搜寻环境激活的目标对象名的同名目录，执行其下的构建插件脚本。</li></ul></li><li><p>在 xfusion/plugins/[target_name]/ 下，创建 &quot;*<strong>*init</strong>.py**&quot; 文件，其内容如下：</p><div class="language-Python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .build </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>在 xfusion/plugins/[target_name]/ 下，创建 &quot;<strong>build.py</strong>&quot; 文件，并按要求及需要实现各个回调方法。</p></li></ol><ul><li><p>build.py 中回调方法的对接：</p><ul><li><p>build : 对接编译方法</p><ul><li><p>可简单理解为：将 XFusion 下的工程构建信息便捷转换为平台侧的构建信息，然后一起参与编译。</p></li><li><p>build 方法对接通常有以下步骤 (简述):</p><ol><li>提供模板文件（*.j2，普通模板与组件模板）（基于 jinja 模板引擎）</li><li>调用模版系统解析方法，配合模板文件（*.j2），解析 xf 侧工程的编译信息 (<strong>build_environ.json</strong>，详情浏览下面 <u>&quot;xf 执行编译时的执行过程 (xf 工程目录下)：&quot;的第 1 点</u>)， 生成平台侧可用的构建信息文件（如 xx.mk、CMakeLists.txt、xx.cmake 等）</li><li>将新生成的构建信息文件（平台侧可用的）加入到平台侧工程进行编译</li></ol></li><li><p>xf 编译时的执行过程 (xf 工程目录下)：</p><ol><li>xf 构建系统会收集 xf 侧的编译相关信息参与编译的文件、includepath、编译选项、CFLAGS、组件信息等），并生成至 <strong>xf 工程目录下</strong> 的 <strong>build 目录下</strong> <strong>build_environ.json</strong> 文件中。</li><li>xf 构建系统执行此插件文件的 <strong>build</strong> 方法。</li></ol></li><li><p>build 方法一般为以下步骤（详情）（需由移植开发者编写）：</p><blockquote><p>关于模板文件如何编写参考 jinja 文档或已存在的其他平台的模板文件</p></blockquote><ul><li><p>根据需要调用对应的模版解析方法及传入对应的模板文件， 对 xf 工程 build 目录下的 <strong>build_environ.json</strong> 文件进行解析。 方法目前有两种：</p><ol><li><p>普通模板解析方法：</p><div class="language-Python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> apply_template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(temp, save, replace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">temp：普通模板文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save：解析完后保存的文件路径（包含名字）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">replace（可选）：</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol><li>读取 build_environ.json 文件</li><li>jinja 模板引擎加载传入的模板文件进行解析</li><li>接收解析结果，转存至指定的文件（传入的 save 参数）</li></ol></li><li><p>组件模板解析方法（非必须，也可自行通过 普通模板解析方法 实现组件解析）</p><div class="language-Python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> apply_components_template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(temp, suffix):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    temp：组件模板文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    suffix：解析完后保存的文件的名字或后缀。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol><li><p>读取 <strong>build_environ.json</strong> 文件</p></li><li><p>jinja 模板引擎加载传入的组件模板文进行解析：</p><ul><li><p>遍历 <strong>public_components</strong> 、 <strong>user_components</strong> 组件集合下的各组件项，每项单独根据组件模板进行解析生成单独的文件，存储的位置会根据 <strong>build_environ.json</strong> 中的层次结构进行目录创建，文件名会根据传入参数 suffix 进行生成：</p><ul><li>如果是 suffix 是类似 “xxx” 的文件名形式，则会生成 “xxx” 的文件</li><li>如果是 suffix 是类似 “.xxx” 的后缀形式，则会生成组件名（又或者说是所在目录名）同名的后缀是 “.xxx” 的文件。</li></ul></li><li><p>例如：public_components 下有组件 xf_hal， 解析生成文件后会 xf 工程 build 目录下，会出现 build/public_components/xf_hal/ 的目录结构，在 xf_hal 下：</p><ul><li>如果传入 suffix 是 “CMakeLists.txt”，则会生成 CMakeLists.txt 文件；</li><li>如果传入 suffix 是 “.mk”，则会生成 xf_hal.mk 文件；</li></ul></li></ul></li></ol></li></ol></li></ul></li><li><p>clean : 对接清除方法。(略)</p></li><li><p>flash : 对接下载方法。(略)</p></li><li><p>export : 对接工程导出方法。(略)</p></li><li><p>update : 对接（导出的）工程更新方法。(略)</p></li><li><p>menuconfig : 对接目标平台的 menuconfig。(略)</p></li><li><p>clean : 对接清除方法。(略)</p></li></ul><details class="details custom-block"><summary>build.py 内容的模板及注解如下 ：</summary><div class="language-Python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xf_build</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xf_build </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">构建可能用的方法：</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exec_cmd : 命令执行（ menuconfiig 命令不能使用该方法）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">apply_template : 普通模板解析方法</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">apply_components_template :组件模板解析方法</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cd_to_root : 跳转至 xf 根目录</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cd_to_target :跳转至激活的目标目录（平台侧工程）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cd_to_project : 跳转至 xf 工程目录</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">更多可用的方法浏览 &quot;from xf_build import api&quot; 导入的 api</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">为了兼容多开放平台（win、linux等）的目录路径，</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">**常见目录操作请使用 pathlib 方法而不是 os.path 下的方法**，</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">这是一种面向对象的方法，构建好目录对象后就可以执行对象下的目录操作方法。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">如：</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">路径对象构建：my_nepath:Path = dir_path / &quot;filename.cmake&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">检查路径存在与否：my_nepath.exists()</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">更多方法及说明参考 pathlib 相关文档或源码</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pathlib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hookimpl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xf_build.get_hookimpl()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[target_name]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  [target_name] 为新增的目标名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 执行 xf build 时会调用的钩子（回调）函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 对接编译方法。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @hookimpl</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, args):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 执行 xf clean 时会调用的钩子（回调）函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #  对接清除方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @hookimpl</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> clean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, args):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 执行 xf flash 时会调用的钩子（回调）函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 对接下载方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @hookimpl</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> flash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, args):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 执行 xf export 时会调用的钩子（回调）函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 对接工程导出方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @hookimpl</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, args):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 执行 xf update 时会调用的钩子（回调）函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 对接（导出的）工程更新方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @hookimpl</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, args):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 执行 xf menuconfig sub 时会调用的钩子（回调）函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 对接目标平台的 menuconfig</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @hookimpl</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> menuconfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, args):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 注意，执行目标平台的 menuconfig 命令时，不要使用 api.exec_cmd 进行执行，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 需要使用 os.system 执行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div></details></li></ul></li></ul><h2 id="_2-验证" tabindex="-1">2. 验证 <a class="header-anchor" href="#_2-验证" aria-label="Permalink to &quot;2. 验证&quot;">​</a></h2><ul><li>在任意普通的 xf 工程下，激活目标环境，然后执行 &quot;xf build&quot;，查看编译信息等是否显示编译成功。</li></ul><h2 id="至此-构建对接完毕" tabindex="-1">至此，构建对接完毕 <a class="header-anchor" href="#至此-构建对接完毕" aria-label="Permalink to &quot;至此，构建对接完毕&quot;">​</a></h2><ul><li>后面需对接的是 xf_sys 的部分</li></ul>`,15)]))}const d=n(p,[["render",e]]);export{u as __pageData,d as default};
