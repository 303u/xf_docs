import{_ as i,c as a,ac as n,o as l}from"./chunks/framework.CeO_JeQa.js";const u=JSON.parse('{"title":"基础功能对接（XF_SYS）","description":"","frontmatter":{},"headers":[],"relativePath":"zh_CN/porting/porting_xfusion_base.md","filePath":"zh_CN/porting/porting_xfusion_base.md","lastUpdated":1744789501000}'),t={name:"zh_CN/porting/porting_xfusion_base.md"};function p(e,s,h,r,k,o){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="基础功能对接-xf-sys" tabindex="-1">基础功能对接（XF_SYS） <a class="header-anchor" href="#基础功能对接-xf-sys" aria-label="Permalink to &quot;基础功能对接（XF_SYS）&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">作者</p><p>dotc</p></div><p>本章节介绍如何对接 XFusion 基础功能部分</p><p><strong>前置准备：</strong></p><ul><li>了解 XFusion 的构建命令及其参数的作用。</li><li>了解 XFusion 基础功能的作用及 XFusion 的例程。</li><li>熟悉将要对接的 XFusion 基础功能的原理、将对接的平台的处理流程等。</li><li>了解 XFusion 基础功能的对接要求。</li></ul><h1 id="目前需要对接的基础功能有" tabindex="-1">目前需要对接的基础功能有 <a class="header-anchor" href="#目前需要对接的基础功能有" aria-label="Permalink to &quot;目前需要对接的基础功能有&quot;">​</a></h1><ol><li>xf_init</li><li>XFusion 的调用</li><li>xf_log</li><li>xf_sys</li></ol><h1 id="对接流程" tabindex="-1">对接流程 <a class="header-anchor" href="#对接流程" aria-label="Permalink to &quot;对接流程&quot;">​</a></h1><h2 id="_1-xf-init-对接" tabindex="-1">1. xf_init 对接： <a class="header-anchor" href="#_1-xf-init-对接" aria-label="Permalink to &quot;1. xf_init 对接：&quot;">​</a></h2><blockquote><p>目前 xf_init 的自动初始化已实现调用的方法统一，即用户只需调用同名的方法即可</p></blockquote><ul><li>目前 xf_init 的自动初始化实现方法有 3 种，仅需选一种方式进行对接，然后 menuconfig 配置成对应的方法即可： <ol><li>(<strong>section 属性</strong>)<strong>(GNU 特性)</strong> : 通过 <code>section</code> 将自动初始化的函数的符号导出指定的段, 实现依赖倒置。</li><li>(<strong>constructor 属性</strong>)<strong>(GNU 特性)</strong> : 将自动初始化的函数的符号, 通过 <code>constructor</code> 挂载到内置初始化链表, 实现在调用时初始化(延迟初始化), 同时也实现依赖倒置。</li><li>(<strong>显式注册表</strong>) : 显式调用注册函数, 此时需要手动修改注册表。此时 <code>xf_init</code> 也会依赖需要初始化的组件, 通常不推荐使用。</li></ol></li></ul><h3 id="section-方法的对接步骤" tabindex="-1">section 方法的对接步骤 <a class="header-anchor" href="#section-方法的对接步骤" aria-label="Permalink to &quot;section 方法的对接步骤&quot;">​</a></h3><ol><li><p>需在平台侧的链接脚本中，找到 text 段</p></li><li><p>在 text 段中加入 <code>xf_auto_init</code> 段，如下：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 省略 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 在此插入 xf_auto_init 段 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ALIGN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    /* 32 位使用 4 字节对齐方式，64 位使用 8 字节对齐方式 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* .xf_auto_init* : 通配 .xf_auto_init* 的符号 ; SORT: 对符号排序; KEEP : 确保这些段不会优化掉 (即使没被显式引用) */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KEEP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.xf_auto_init</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ALIGN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    /* 32 位使用 4 字节对齐方式，64 位使用 8 字节对齐</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 省略 */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ol><h3 id="constructor-方法的对接步骤" tabindex="-1">constructor 方法的对接步骤 <a class="header-anchor" href="#constructor-方法的对接步骤" aria-label="Permalink to &quot;constructor 方法的对接步骤&quot;">​</a></h3><ul><li>略，仅需平台侧编译器支持 constructor 属性方法即可</li></ul><h3 id="显式注册表-方法的对接步骤" tabindex="-1">显式注册表 方法的对接步骤 <a class="header-anchor" href="#显式注册表-方法的对接步骤" aria-label="Permalink to &quot;显式注册表 方法的对接步骤&quot;">​</a></h3><ul><li>略，不推荐使用</li></ul><h2 id="_2-xfusion-的调用" tabindex="-1">2. XFusion 的调用 <a class="header-anchor" href="#_2-xfusion-的调用" aria-label="Permalink to &quot;2. XFusion 的调用&quot;">​</a></h2><ul><li><p>XFusion 需由平台侧工程调用才能正常运行，目前需要被调用的方法有 2 个 :</p><ol><li><p><strong>void xfusion_init(void)</strong> : 初始化 XFusion ，包含 log 初始化，自动初始化等。需要放在较早被调用的位置，且在 &quot;xfusion_run&quot; 的调用前。</p></li><li><p><strong>void xfusion_run(void)</strong> : 运行 XFusion 。需要将该函数放到循环里面调用。</p></li></ol></li><li><p>例 : main 函数中调用 &quot;xfusion_init&quot; 与 &quot;xfusion_run&quot; 方法。 (也可自行创建的线程进行调用)</p><div class="language-C vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    xfusion_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        xfusion_run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><h2 id="_3-xf-log-对接" tabindex="-1">3. xf_log 对接： <a class="header-anchor" href="#_3-xf-log-对接" aria-label="Permalink to &quot;3. xf_log 对接：&quot;">​</a></h2><ul><li><p>目前 xf_log 仅对接一个方法：</p><ol><li>*<strong>int xf_log_register_obj(xf_log_out_t out_func, void <em>user_args)</em></strong></li></ol><ul><li><p>描述：注册 log 的后端 (log 最终输出到哪里)，其最大值受到 XF_LOG_OBJ_MAX 的限制。</p></li><li><p>参数说明：</p><ol><li><p><strong><em>out_func</em></strong> : 后端输出函数， 如果减少 IO 操作，可以考虑使用异步缓冲</p><ul><li>类型 : typedef void(*xf_log_out_t)(const char *str, size_t len, void *arg);</li></ul></li><li><p><strong><em>user_args</em></strong> : 传入的参数，会在 out_func 中被调用。</p></li></ol></li><li><p>对接流程 :</p><blockquote><p>如对接了 xf_sys 中的时间戳功能，则 xf_log 会正常输出时间戳；否则不会正常输出时间戳。</p></blockquote><ol><li><p>实现 <strong>xf_log_out_t</strong> 类型的后端函数 (如 printf 、串口 等)。</p></li><li><p>实现另一个函数 (假设为 : &quot;port_log_init&quot; )，其实现为 : 通过 &quot;<strong>xf_log_register_obj</strong>&quot; 将实现后端函数注册至 xf_log 实现对接。</p></li><li><p>通过 <strong>XF_INIT_EXPORT_SETUP</strong> 将 &quot;port_log_init&quot; 加入自动初始化列表 (注意：需包含初始化的头文件 &quot;xf_init.h&quot; ， 否则以上操作无效)。</p></li></ol><ul><li>例 &quot;port_xf_log.c&quot; 文件内容 :</li></ul><div class="language-C vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xf_log.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xf_init.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;stdio.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xf_log_out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%.*s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)len, str);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> port_log_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    xf_log_register_obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xf_log_out, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XF_INIT_EXPORT_SETUP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port_log_init);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></li><li><p>验证 : 编译带有 xf_log 日志输出，且日志等级设置正常的工程，运行查看输出日志结果进行验证。</p></li></ul></li></ul><h2 id="xf-sys-对接" tabindex="-1">xf_sys 对接 <a class="header-anchor" href="#xf-sys-对接" aria-label="Permalink to &quot;xf_sys 对接&quot;">​</a></h2><ul><li>xf_sys 目前可对接的功能有 : (看情况进行对接)</li></ul><ol><li><p>系统时间 (xf_sys_time) (强烈建议对接)</p></li><li><p>系统看门狗 (xf_sys_watchdog)</p></li><li><p>系统重启</p></li><li><p>中断开启与关闭</p></li></ol><h3 id="系统时间对接" tabindex="-1">系统时间对接 <a class="header-anchor" href="#系统时间对接" aria-label="Permalink to &quot;系统时间对接&quot;">​</a></h3><ul><li><p>目前只需要调用 &quot;<strong>xf_sys_time_init</strong>&quot; 来注册系统时间微妙级 (us)的时间戳获取的方法即可。</p></li><li><p>对接流程 :</p><ol><li><p>实现 &quot;<strong>xf_us_t (*get_us)(void)</strong>&quot; 类型的微妙级时间戳获取函数。</p></li><li><p>实现另一个函数 (假设为 : &quot;port_sys_init&quot; )，其实现为 : 通过 &quot;<strong>xf_sys_time_init</strong>&quot; 将实现的微妙级时间戳获取函数注册至 xf_sys 实现对接。</p></li><li><p>通过 <strong>XF_INIT_EXPORT_BOARD</strong> 将 &quot;port_sys_init&quot; 加入自动初始化列表 (注意：需包含初始化的头文件 &quot;xf_init.h&quot; ， 否则以上操作无效)。</p></li></ol></li><li><p>例 :</p><div class="language-C vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xf_sys.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xf_init.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/time.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;time.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xf_us_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _port_xf_sys_get_us</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timespec current_time;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    clock_gettime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CLOCK_MONOTONIC, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">current_time);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current_time.tv_sec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current_time.tv_nsec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> port_sys_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    xf_sys_time_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_port_xf_sys_get_us);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XF_OK;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XF_INIT_EXPORT_BOARD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port_sys_init);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></li></ul><h3 id="系统看门狗对接" tabindex="-1">系统看门狗对接 <a class="header-anchor" href="#系统看门狗对接" aria-label="Permalink to &quot;系统看门狗对接&quot;">​</a></h3><ul><li><p>目前可对接的系统看门狗接口有:</p><ol><li><p><strong><em>xf_err_t xf_sys_watchdog_enable(void)</em></strong> : 系统看门狗开启</p></li><li><p><strong><em>xf_err_t xf_sys_watchdog_disable(void)</em></strong> : 系统看门狗关闭</p></li><li><p><strong><em>xf_err_t xf_sys_watchdog_kick(void)</em></strong> : 系统看门狗喂狗操作</p></li></ol></li></ul><h3 id="系统重启对接" tabindex="-1">系统重启对接 <a class="header-anchor" href="#系统重启对接" aria-label="Permalink to &quot;系统重启对接&quot;">​</a></h3><ul><li><p>目前可对接的系统重启接口有 :</p><ol><li><strong><em>void xf_sys_reboot(void)</em></strong> : 软件系统重启</li></ol></li></ul><h3 id="系统中断对接" tabindex="-1">系统中断对接 <a class="header-anchor" href="#系统中断对接" aria-label="Permalink to &quot;系统中断对接&quot;">​</a></h3><ul><li><p>目前可对接的系系统中断接口有 :</p><ol><li><p><strong><em>xf_err_t xf_sys_interrupt_enable(void)</em></strong> : 系统中断开启</p></li><li><p><strong><em>xf_err_t xf_sys_interrupt_disable(void)</em></strong> : 系统中断关闭</p></li></ol></li></ul><h1 id="至此-基础功能对接完成。" tabindex="-1">至此，基础功能对接完成。 <a class="header-anchor" href="#至此-基础功能对接完成。" aria-label="Permalink to &quot;至此，基础功能对接完成。&quot;">​</a></h1><ul><li>后面根据需要可对接 xf_osal 、 xf_ble 、 xf_sle 、xf_wifi 、 xf_netif 等其他部分。</li></ul>`,34)]))}const g=i(t,[["render",p]]);export{u as __pageData,g as default};
