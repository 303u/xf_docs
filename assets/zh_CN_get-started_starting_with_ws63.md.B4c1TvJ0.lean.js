import{_ as s,c as i,ac as e,o as t}from"./chunks/framework.CeO_JeQa.js";const u=JSON.parse('{"title":"从 ws63 开始","description":"","frontmatter":{},"headers":[],"relativePath":"zh_CN/get-started/starting_with_ws63.md","filePath":"zh_CN/get-started/starting_with_ws63.md","lastUpdated":1744789501000}'),n={name:"zh_CN/get-started/starting_with_ws63.md"};function l(r,a,h,p,d,o){return t(),i("div",null,a[0]||(a[0]=[e('<h1 id="从-ws63-开始" tabindex="-1">从 ws63 开始 <a class="header-anchor" href="#从-ws63-开始" aria-label="Permalink to &quot;从 ws63 开始&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">作者</p><p>kirto</p></div><p>本文主要介绍如何搭建 WS63 的 XFusion 开发环境</p><div class="warning custom-block github-alert"><p class="custom-block-title">开发环境支持情况</p><p>XFusion 下本平台已支持 (测试验证) 的开发环境有：Linux</p></div><h1 id="关于-ws63" tabindex="-1">关于 WS63 <a class="header-anchor" href="#关于-ws63" aria-label="Permalink to &quot;关于 WS63&quot;">​</a></h1><p>WS63 系列是 2.4GHz Wi-Fi 6 BLE 星闪多模 IoT SoC 芯片，其中增强款芯片 WS63 支持 2.4GHz 的雷达人体活动检测功能，适用于大小家电、电工照明及对人体出没检测有需求的常电类物联网智能场景。</p><ul><li>集成 IEEE 802.11 b/g/n/ax 基带和 RF 电路，包括功率放大器 PA、低噪声放大器 LNA、RF balun、天线开关以及电源管理模块等；</li><li>支持 20MHz 频宽，提供最大 114.7Mbps 物理层速率，支持更大的发射功率和更远的覆盖距离；</li><li>支持 BLE 1MHz/2MHz 频宽、BLE4.0/4.1/4.2/5.0/5.1/5.2 协议、BLE Mesh 和 BLE 网关功能，最大空口速率 2Mbps；</li><li>支持星闪 SLE 1MHz/2MHz/4MHz 频宽、SLE1.0 协议、支持 SLE 网关功能，最大空口速率 12Mbps。</li></ul><p>WS63 系列芯片采用 QFN40（5mm x 5mm）封装，匹配不同场合的应用，细分为下列两种：</p><ul><li>Hi3863：合封 4MB Flash，支持 WiFi、SLE、BLE 多模并发，支持单天线通道</li><li>Hi3863E：支持雷达人体活动检测，合封 4MB Flash，支持 WiFi、SLE、BLE 多模并发，支持双天线通道</li></ul><p>见：《<a href="https://www.hisilicon.com/cn/products/connectivity/short-range-IoT/wifi-nearlink-ble/Hi3863V100" target="_blank" rel="noreferrer">WS63 芯片 | 海思官网 (hisilicon.com)</a>》。</p><h1 id="激活-xfusion" tabindex="-1">激活 XFusion <a class="header-anchor" href="#激活-xfusion" aria-label="Permalink to &quot;激活 XFusion&quot;">​</a></h1><p>通过之前在 .bashrc 中保存的激活命令的别名来激活 (详见<a href="./preparation_with_linux.html#安装-xfusion">安装 XFusion</a>)</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_xf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ws63</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用 <code>xf target -s</code> 命令，可以帮助我们确认导出的 target 是否是 ws63</p><h1 id="安装-ws63-sdk" tabindex="-1">安装 WS63 SDK <a class="header-anchor" href="#安装-ws63-sdk" aria-label="Permalink to &quot;安装 WS63 SDK&quot;">​</a></h1><h2 id="获取源码" tabindex="-1">获取源码 <a class="header-anchor" href="#获取源码" aria-label="Permalink to &quot;获取源码&quot;">​</a></h2><p>激活后，我们仅仅需要一个命令。XFusion 便会自动的根据 <code>boards/nearlink/ws63</code> 下的 <code>target.json</code> 文件，来下载对应版本的sdk。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> target</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="安装-ws63-sdk-环境依赖" tabindex="-1">安装 WS63 SDK 环境依赖 <a class="header-anchor" href="#安装-ws63-sdk-环境依赖" aria-label="Permalink to &quot;安装 WS63 SDK 环境依赖&quot;">​</a></h2><p>ws63 的 SDK 是使用 python + cmake 编译，其中依赖一些软件，需要安装</p><h3 id="配置-shell" tabindex="-1">配置 Shell <a class="header-anchor" href="#配置-shell" aria-label="Permalink to &quot;配置 Shell&quot;">​</a></h3><p>配置默认使用 bash。打开Linux终端，执行命令“sudo dpkg-reconfigure dash”， 选择 no。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dpkg-reconfigure</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="安装-cmake" tabindex="-1">安装 Cmake <a class="header-anchor" href="#安装-cmake" aria-label="Permalink to &quot;安装 Cmake&quot;">​</a></h3><p>打开 Linux 终端，执行命令“sudo aptinstall cmake”，完成Cmake 的安装。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="安装pycparser" tabindex="-1">安装pycparser <a class="header-anchor" href="#安装pycparser" aria-label="Permalink to &quot;安装pycparser&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pycparser==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.21</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',28)]))}const k=s(n,[["render",l]]);export{u as __pageData,k as default};
