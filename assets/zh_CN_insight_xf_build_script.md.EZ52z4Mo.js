import{_ as t,c as s,ac as r,o as l}from"./chunks/framework.CeO_JeQa.js";const u=JSON.parse('{"title":"xf build 构建脚本","description":"","frontmatter":{},"headers":[],"relativePath":"zh_CN/insight/xf_build_script.md","filePath":"zh_CN/insight/xf_build_script.md","lastUpdated":1744789501000}'),p={name:"zh_CN/insight/xf_build_script.md"};function i(e,o,d,n,c,g){return l(),s("div",null,o[0]||(o[0]=[r('<h1 id="xf-build-构建脚本" tabindex="-1">xf build 构建脚本 <a class="header-anchor" href="#xf-build-构建脚本" aria-label="Permalink to &quot;xf build 构建脚本&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">作者</p><p>kirto</p></div><p>本文主要说明，xf build的功能和相关源码。</p><h1 id="xf-build-构思来源" tabindex="-1">xf build 构思来源 <a class="header-anchor" href="#xf-build-构思来源" aria-label="Permalink to &quot;xf build 构思来源&quot;">​</a></h1><p>在开发 XFusion 的时候，我意识到在 c 语言编译中由于各种构建脚本不同一，导致我们做一个中间件的时候不得不去适配多个构建脚本。 在这种情况下，我们考虑能不能做一个脚本，该脚本用于生成一个含有各种编译信息的 json 文件。再由生成器生成不同的构建脚本，或者工程。</p><p>上述的思路就是 xf build 的制作初衷。</p><p>再基础的优化和功能添加后，xf build 具有以下的功能：</p><ul><li>生成含有各种编译信息的 json 文件</li><li>可以拓展的各种生成器插件</li><li>支持导出原生工程</li><li>支持 menuconfig 可视化裁剪配置工程</li><li>支持基于 pyserial 的命令行串口监视器</li><li>支持基于 kconfiglib 的 menuconfig 配置工具</li><li>包管理工具</li></ul><h1 id="仓库地址" tabindex="-1">仓库地址 <a class="header-anchor" href="#仓库地址" aria-label="Permalink to &quot;仓库地址&quot;">​</a></h1><p><strong>github</strong>: <a href="https://github.com/x-eks-fusion/xf_build" target="_blank" rel="noreferrer">https://github.com/x-eks-fusion/xf_build</a></p><p><strong>gitee</strong>: <a href="https://gitee.com/x-eks-fusion/xf_build" target="_blank" rel="noreferrer">https://gitee.com/x-eks-fusion/xf_build</a></p><h1 id="xf-命令参考" tabindex="-1">xf 命令参考 <a class="header-anchor" href="#xf-命令参考" aria-label="Permalink to &quot;xf 命令参考&quot;">​</a></h1><div class="info custom-block github-alert"><p class="custom-block-title">参考</p><p>详见：<a href="./../get-started/xf_command_reference.html">xf 命令参考</a></p></div><h1 id="构建相关-api" tabindex="-1">构建相关 API <a class="header-anchor" href="#构建相关-api" aria-label="Permalink to &quot;构建相关 API&quot;">​</a></h1><p>这部分是在编译的时候，xf_project.py xf_collect.py 所调用的 API 。</p><p id="project_init"></p><div class="card"><h3>project_init</h3><p><strong>功能：</strong>初始化一个 XFusion 工程。</p><p><strong>参数：</strong></p><ul><li><code>user_dirs</code> (<code>list</code>): 用户添加的额外文件夹。</li></ul><p><strong>返回值：</strong></p><ul> 无 </ul></div><p id="program"></p><div class="card"><h3>program</h3><p><strong>功能：</strong>开始构建工程。</p><p><strong>参数：</strong></p><ul><li><code>cflags</code> (<code>list</code>): 全局的 cflags 参数。</li></ul><p><strong>返回值：</strong></p><ul> 无 </ul></div><p id="collect"></p><div class="card"><h3>collect</h3><p><strong>功能：</strong>收集编译信息。</p><p><strong>参数：</strong></p><ul><li><code>srcs</code> (<code>list</code>): 收集源文件。</li><li><code>inc_dirs</code> (<code>list</code>): 收集头文件路径。</li><li><code>requires</code> (<code>list</code>): 模块依赖关系。</li><li><code>cflags</code> (<code>list</code>): 模块 cflags 参数。</li></ul><p><strong>返回值：</strong></p><ul> 无 </ul></div><p id="get_define"></p><div class="card"><h3>get_define</h3><p><strong>功能：</strong>从 menuconfig 中获取宏定义的值。</p><p><strong>参数：</strong></p><ul><li><code>define</code> (<code>str</code>): 需要获取的宏定义。</li></ul><p><strong>返回值：</strong></p><ul> 返回宏的值，如果是bool类型返回y或者n </ul></div><h1 id="插件对接-api" tabindex="-1">插件对接 API <a class="header-anchor" href="#插件对接-api" aria-label="Permalink to &quot;插件对接 API&quot;">​</a></h1><p>这部分是在对接的时候，插件需要对接的 API 。</p><p id="build"></p><div class="card"><h3>build</h3><p><strong>功能：</strong>根据收集的编译信息，生成 SDK 构建脚本，并启动编译。</p><p><strong>参数：</strong></p><ul><li><code>args</code> (<code>list</code>): 顶层调用命令传递下来的参数。</li></ul><p><strong>返回值：</strong></p><ul> 无 </ul></div><p id="clean"></p><div class="card"><h3>clean</h3><p><strong>功能：</strong>清除编译的中间产物。</p><p><strong>参数：</strong></p><ul><li><code>args</code> (<code>list</code>): 顶层调用命令传递下来的参数。</li></ul><p><strong>返回值：</strong></p><ul> 无 </ul></div><p id="flash"></p><div class="card"><h3>flash</h3><p><strong>功能：</strong>调用命令烧录。</p><p><strong>参数：</strong></p><ul><li><code>args</code> (<code>list</code>): 顶层调用命令传递下来的参数。</li></ul><p><strong>返回值：</strong></p><ul> 无 </ul></div><p id="menuconfig"></p><div class="card"><h3>menuconfig</h3><p><strong>功能：</strong>调用底层 menuconfig。</p><p><strong>参数：</strong></p><ul><li><code>args</code> (<code>list</code>): 顶层调用命令传递下来的参数。</li></ul><p><strong>返回值：</strong></p><ul> 无 </ul></div><p id="export"></p><div class="card"><h3>export</h3><p><strong>功能：</strong>根据收集的编译信息，导出原始 sdk 工程。</p><p><strong>参数：</strong></p><ul><li><code>args</code> (<code>list</code>): 顶层调用命令传递下来的参数。</li></ul><p><strong>返回值：</strong></p><ul> 无 </ul></div><p id="update"></p><div class="card"><h3>update</h3><p><strong>功能：</strong>根据收集的编译信息，更新已有的 sdk 工程。</p><p><strong>参数：</strong></p><ul><li><code>args</code> (<code>list</code>): 顶层调用命令传递下来的参数。</li></ul><p><strong>返回值：</strong></p><ul> 无 </ul></div><h1 id="插件调用-api" tabindex="-1">插件调用 API <a class="header-anchor" href="#插件调用-api" aria-label="Permalink to &quot;插件调用 API&quot;">​</a></h1><p id="exec_cmd"></p><div class="card"><h3>exec_cmd</h3><p><strong>功能：</strong>在终端中执行命令行。</p><p><strong>参数：</strong></p><ul><li><code>command</code> (<code>str|list</code>): 需要执行的命令。</li></ul><p><strong>返回值：</strong></p><ul> 无 </ul></div><p id="apply_template"></p><div class="card"><h3>apply_template</h3><p><strong>功能：</strong>应用模板文件。</p><p><strong>参数：</strong></p><ul><li><code>temp</code> (<code>str</code>): 模板文件的路径。</li><li><code>save</code> (<code>str</code>): 保存应用模板后的文件路径。</li><li><code>replace</code> (<code>dict</code>): 保存应用模板后的文件路径。</li></ul><p><strong>返回值：</strong></p><ul> 无 </ul></div><p id="apply_components_template"></p><div class="card"><h3>apply_components_template</h3><p><strong>功能：</strong> 处理并生成基于模板的文件，按照配置数据自动生成对应的目录和文件。</p><p><strong>参数：</strong></p><ul><li><code>temp</code> (<code>str</code>): 模板文件的名称，用于加载模板内容。</li><li><code>save</code> (<code>str</code>): 生成文件的后缀或文件名。如果以 `.` 开头，表示后缀；否则为完整文件名。</li></ul><p><strong>返回值：</strong></p><ul> 无 </ul></div><p id="get_define"></p><div class="card"><h3>get_define</h3><p><strong>功能：</strong> 获取 menuconfig 的宏。</p><p><strong>参数：</strong></p><ul><li><code>define</code> (<code>str</code>): menuconfig 中的定义。</li></ul><p><strong>返回值：</strong></p><ul> 无 </ul></div><p id="cd_to_root"></p><div class="card"><h3>cd_to_root</h3><p><strong>功能：</strong> 切换到 xfusion 的根目录下。</p><p><strong>参数：</strong></p><ul> 无 </ul><p><strong>返回值：</strong></p><ul> 无 </ul></div><p id="cd_to_target"></p><div class="card"><h3>cd_to_target</h3><p><strong>功能：</strong> 切换到当前 target 目录下。</p><p><strong>参数：</strong></p><ul> 无 </ul><p><strong>返回值：</strong></p><ul> 无 </ul></div><p id="cd_to_project"></p><div class="card"><h3>cd_to_project</h3><p><strong>功能：</strong> 切换到当前工程目录下。</p><p><strong>参数：</strong></p><ul> 无 </ul><p><strong>返回值：</strong></p><ul> 无 </ul></div><p id="get_sdk_dir"></p><div class="card"><h3>get_sdk_dir</h3><p><strong>功能：</strong> 获取 SDK 所在的路径。（只有配置了 target.json 才可以获取）</p><p><strong>参数：</strong></p><ul> 无 </ul><p><strong>返回值：</strong></p><ul> 返回 SDK 的路径 </ul></div><p id="get_XF_ROOT"></p><div class="card"><h3>get_XF_ROOT</h3><p><strong>功能：</strong> 获取 XFusion 路径 </p><p><strong>参数：</strong></p><ul> 无 </ul><p><strong>返回值：</strong></p><ul> 返回 XFusion 的路径 </ul></div><p id="get_XF_TARGET_PATH"></p><div class="card"><h3>get_XF_PROJECT_PATH</h3><p><strong>功能：</strong> 获取当前 target 目录。 </p><p><strong>参数：</strong></p><ul> 无 </ul><p><strong>返回值：</strong></p><ul> 返回当前 target 目录 </ul></div><p id="get_XF_PROJECT_PATH"></p><div class="card"><h3>get_XF_PROJECT_PATH</h3><p><strong>功能：</strong> 获取当前工程路径。 </p><p><strong>参数：</strong></p><ul> 无 </ul><p><strong>返回值：</strong></p><ul> 返回当前工程路径 </ul></div><p id="get_PROJECT_BUILD_PATH"></p><div class="card"><h3>get_PROJECT_BUILD_PATH</h3><p><strong>功能：</strong> 获取当前工程的 build 路径。 </p><p><strong>参数：</strong></p><ul> 无 </ul><p><strong>返回值：</strong></p><ul> 返回当前工程的 build 路径 </ul></div><p id="get_ROOT_PLUGIN"></p><div class="card"><h3>get_ROOT_PLUGIN</h3><p><strong>功能：</strong> 获取当前 target 插件路径。 </p><p><strong>参数：</strong></p><ul> 无 </ul><p><strong>返回值：</strong></p><ul> 返回当前 target 插件路径。 </ul></div><p id="get_PROJECT_CONFIG_PATH"></p><div class="card"><h3>get_PROJECT_CONFIG_PATH</h3><p><strong>功能：</strong> 获取当前工程配置路径。 </p><p><strong>参数：</strong></p><ul> 无 </ul><p><strong>返回值：</strong></p><ul> 返回当前工程配置路径。 </ul></div>',66)]))}const h=t(p,[["render",i]]);export{u as __pageData,h as default};
