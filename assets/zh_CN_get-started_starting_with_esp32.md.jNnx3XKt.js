import{_ as a,c as i,ac as e,o as t}from"./chunks/framework.CeO_JeQa.js";const b=JSON.parse('{"title":"从 esp32 开始","description":"","frontmatter":{},"headers":[],"relativePath":"zh_CN/get-started/starting_with_esp32.md","filePath":"zh_CN/get-started/starting_with_esp32.md","lastUpdated":1744789501000}'),n={name:"zh_CN/get-started/starting_with_esp32.md"};function p(l,s,r,h,d,o){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="从-esp32-开始" tabindex="-1">从 esp32 开始 <a class="header-anchor" href="#从-esp32-开始" aria-label="Permalink to &quot;从 esp32 开始&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">作者</p><p>kirto</p></div><p>本文主要介绍如何搭建 ESP32 的 XFusion 开发环境</p><div class="warning custom-block github-alert"><p class="custom-block-title">开发环境支持情况</p><p>XFusion 下本平台已支持 (测试验证) 的开发环境有：Linux</p></div><h1 id="关于-esp32" tabindex="-1">关于 ESP32 <a class="header-anchor" href="#关于-esp32" aria-label="Permalink to &quot;关于 ESP32&quot;">​</a></h1><p>ESP32 是由乐鑫科技（Espressif Systems）推出的一款高性能 IoT SoC（系统级芯片），支持 Wi-Fi 和 BLE 双模通信，广泛应用于智能家居、工业自动化和可穿戴设备等物联网场景。ESP32 系列芯片内置强大的计算能力和多样化的外设接口，能够满足复杂 IoT 应用的需求。</p><p>主要功能与特性 无线通信：集成 IEEE 802.11 b/g/n Wi-Fi 基带和 RF 电路，支持 2.4GHz 频段，提供高达 150Mbps 的物理层速率，支持长距离稳定通信。 BLE 功能：支持 BLE 4.2 和 BLE 5.0 协议，提供高达 2Mbps 的空口速率，兼容 Mesh 网络与 BLE 网关功能，满足多种无线场景。 强大的计算能力：采用双核 Tensilica Xtensa LX6 处理器，主频最高达 240MHz，可流畅运行多任务程序。 丰富的外设接口：集成 UART、SPI、I2C、I2S、PWM、ADC 和 DAC 等多种外设，满足多样化硬件设计需求。 低功耗设计：支持多种低功耗工作模式，包括深度睡眠模式，适合电池供电设备的长时间使用。 先进的硬件集成 集成电路：包括功率放大器（PA）、低噪声放大器（LNA）、RF balun 和天线开关，提供稳定的无线性能。 内置存储：集成 SRAM 和 Flash，部分型号支持外部扩展存储。 安全功能：提供硬件加密引擎（AES、SHA 等），支持安全启动（Secure Boot）和闪存加密功能。</p><p>如需更多详细技术资料，请参考：<a href="https://www.espressif.com/" target="_blank" rel="noreferrer">ESP32 系列芯片 | 乐鑫官网 (espressif.com)</a>。</p><h1 id="安装-esp-idf" tabindex="-1">安装 ESP-IDF <a class="header-anchor" href="#安装-esp-idf" aria-label="Permalink to &quot;安装 ESP-IDF&quot;">​</a></h1><div class="warning custom-block github-alert"><p class="custom-block-title">⚠️注意</p><p>XFusion 目前对接的是 esp-idf v5.0 版本。</p></div><p>详细步骤见 ESP-IDF 官方文档：</p><p>《<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/v5.0.6/esp32/get-started/index.html" target="_blank" rel="noreferrer">快速入门 - ESP32 - — ESP-IDF 编程指南 v5.0.6 文档 (espressif.com)</a>》。</p><h1 id="安装-xfusion" tabindex="-1">安装 XFusion <a class="header-anchor" href="#安装-xfusion" aria-label="Permalink to &quot;安装 XFusion&quot;">​</a></h1><p>如果安装 esp-idf 选用 linux 环境。详情参考：<a href="./preparation_with_linux.html">linux 环境搭建</a></p><h1 id="使用-xfusion-编译" tabindex="-1">使用 XFusion 编译 <a class="header-anchor" href="#使用-xfusion-编译" aria-label="Permalink to &quot;使用 XFusion 编译&quot;">​</a></h1><ol><li><p>激活 ESP-IDF 环境 我们在每次打开一个新的终端时，需要激活 ESP-IDF 环境</p><ul><li><strong>普通激活</strong><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> esp-idf</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 进入 esp-idf 文件夹</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./export.sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 导出 esp-idf 相关环境变量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><p>由于激活需要在每次打开新终端的时候都需要执行，如果按照上述操作，则每次都需要切换文件夹。 以下通过 alias 指令在 .bashrc 中定义别名，简化了激活的方式。</p><ul><li><strong>便捷激活</strong></li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 根据不同 shell ，zsh 就是 .zshrc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>进入 vim 界面后，输入 <kbd>Shift</kbd>+<kbd>g</kbd>，跳转到最后一行。 按下 <kbd>o</kbd> 插入自己的命令。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_idf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;. ~/esp-idf/export.sh&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 双引号后面是 esp-idf 路径</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后通过 <kbd>Esc</kbd> 退出编辑。 最后通过 <kbd>:</kbd>+<kbd>w</kbd>+<kbd>q</kbd> 再加上回车确认保存。</p><p>至此，重启终端后。每次激活只需要输入：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_idf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>激活 XFusion 环境 通过之前在 .bashrc 中保存的激活命令的别名来激活 (详见<a href="./preparation_with_linux.html#安装-xfusion">安装 XFusion</a>)</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_xf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> esp32</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>至此，就可以使用 xf 命令了</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><p>‍</p>`,17)]))}const u=a(n,[["render",p]]);export{b as __pageData,u as default};
