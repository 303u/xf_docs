import{_ as i,c as a,ac as n,o as t}from"./chunks/framework.CeO_JeQa.js";const d=JSON.parse('{"title":"平台工程移植","description":"","frontmatter":{},"headers":[],"relativePath":"zh_CN/porting/porting_xfusion_project.md","filePath":"zh_CN/porting/porting_xfusion_project.md","lastUpdated":1744789501000}'),l={name:"zh_CN/porting/porting_xfusion_project.md"};function o(e,s,p,r,h,u){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="平台工程移植" tabindex="-1">平台工程移植 <a class="header-anchor" href="#平台工程移植" aria-label="Permalink to &quot;平台工程移植&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">作者</p><p>dotc</p></div><p>本章节介绍如何将平台 SDK 与 XFusion 关联</p><p>(可简单理解为：如何创建一个关联 XFusion 的平台侧工程)</p><p><strong>前置准备：</strong></p><ul><li>了解 XFusion 的构建命令及其参数的作用。</li><li>会使用 python</li><li>简单了解 jinja 用法</li><li>对将要对接的平台构建流程较为熟悉</li></ul><h1 id="对接流程" tabindex="-1">对接流程 <a class="header-anchor" href="#对接流程" aria-label="Permalink to &quot;对接流程&quot;">​</a></h1><h2 id="_1-新增目标对象及目标目录" tabindex="-1">1. 新增目标对象及目标目录 <a class="header-anchor" href="#_1-新增目标对象及目标目录" aria-label="Permalink to &quot;1. 新增目标对象及目标目录&quot;">​</a></h2><ul><li><p>在 xfusion/boards 下新增一个目录，再在其下创建一个名为 &quot;<strong>target.json</strong>&quot; 的文件，此时，<strong>该目录名</strong>则为 xfusion 下平台环境激活以及构建时可以被选定的<strong>目标对象名</strong>。</p><ul><li>原因：xfusion 在进行环境激活时（. ./export.sh xxx），递归检索并收集 boards 目录下的存在 &quot;target.json&quot; 文件的目录的名字，将其所在的目录名加入到可激活、可构建的目标对象列表中。</li></ul></li><li><p>例：将要新增 星闪芯片 ws63 的支持，目标名为 &quot;ws63&quot;</p><ol><li><p>可以在 boards 下递归创建目录 nearlink/ws63</p></li><li><p>其后在 boards/nearlink/ws63 下创建 &quot;<strong>target.json</strong>&quot; 文件</p></li><li><p>此时不指定目标平台去执行环境激活命令（<strong>. ./export.sh</strong>），即可看到提示需要传入目标名，其后紧跟着当前支持的目标名，就能看的 &quot;ws63&quot; 在支持列表中了，如下：</p><div class="language-Bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user@host:.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./export.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user@host:You</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> need</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> choose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> one</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> following</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> targets:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ws63</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bs21</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> esp32</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol></li><li><p>export 激活环境过后，以下变量将会被设置：</p><ol><li>&quot;XF_ROOT&quot; 设置成激活的 XFusion 的跟目录。</li><li>&quot;XF_TARGET&quot; 设置成激活的目标对象名。</li><li>&quot;XF_TARGET_PATH&quot; 设置成激活的目标目录的路径。</li><li>&quot;XF_VERSION&quot; 设置成激活的 XFusion 的版本。</li></ol><ul><li>更多可查看激活命令执行时的输出信息。</li></ul></li></ul><h2 id="_2-提供平台-sdk-至-xfusion" tabindex="-1">2. 提供平台 SDK 至 XFusion <a class="header-anchor" href="#_2-提供平台-sdk-至-xfusion" aria-label="Permalink to &quot;2. 提供平台 SDK 至 XFusion&quot;">​</a></h2><ul><li><p>准备好要对接的平台的 SDK，放至 xfusion/sdks 下。</p></li><li><p>如果可以且需要进行版本控制，可在<strong>目标目录</strong>下的 &quot;<strong>target.json</strong>&quot; 文件中添加版本信息。(<strong><em>xfusion/boards/ ... /[target_name]</em></strong>，如何创建目标目录见: <a href="#1-新增目标对象">新增目标对象</a> )</p><ul><li>&quot;<strong>target.json</strong>&quot; 版本控制条目及说明如下：</li></ul><div class="language-Json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;sdks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/xxxxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;commit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxxxxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;dir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;平台 SDK 在 xfusion/sdks 下的路径 (目录名)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;branch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;分支名&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><h2 id="_3-提供平台侧工程-至-xfusion-平台工程关联至-xfuison" tabindex="-1">3. 提供平台侧工程 至 XFusion (平台工程关联至 XFuison) <a class="header-anchor" href="#_3-提供平台侧工程-至-xfusion-平台工程关联至-xfuison" aria-label="Permalink to &quot;3. 提供平台侧工程 至 XFusion (平台工程关联至 XFuison)&quot;">​</a></h2><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>此步通用但不是必须的。 (如：平台侧的普通工程无法存在于 SDK 外，或者难度过大，则可能没有此步骤，不提供平台侧工程至 XFusion ，而是在源 SDK 下的工程直接关联至 XFusion，不过此情况下也可参考本步骤进行对接)</p></div><ol><li>准备一份平台侧最简的、包含构建文件、能正常编译的平台侧原生工程，迁移或拷贝至<strong>目标目录</strong>下 (如：xfusion/boards/../[&quot;target_name&quot;]，如何创建目标目录见: <a href="#1-新增目标对象">新增目标对象</a> )</li><li>后面将以此工程为基础，来对接 (关联) 到 XFusion，浏览下一章节 <a href="./porting_xfusion_build.html">构建对接</a></li></ol>`,14)]))}const g=i(l,[["render",o]]);export{d as __pageData,g as default};
